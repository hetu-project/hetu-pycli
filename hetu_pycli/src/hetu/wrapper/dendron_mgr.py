# NeuronMgr contract class generated from [ABI](contracts/NeuronManager.abi)
# Do not edit this file directly, it is generated from the ABI.

from web3 import Web3

class DendronMgr:
    def __init__(self, contract_address, provider, abi):
        self.contract_address = contract_address
        self.web3 = Web3(provider)
        self.contract = self.web3.eth.contract(address=contract_address, abi=abi)

    def getDendronCount(self, netuid):
        """
        Call getDendronCount(netuid)
        :param netuid: uint16 (solidity name: 'netuid')
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.getDendronCount(netuid).call()

    def getDendronInfo(self, netuid, account):
        """
        Call getDendronInfo(netuid, account)
        :param netuid: uint16 (solidity name: 'netuid')
        :param account: address (solidity name: 'account')
        :return: [{'components': [{'internalType': 'address', 'name': 'account', 'type': 'address'}, {'internalType': 'uint16', 'name': 'netuid', 'type': 'uint16'}, {'internalType': 'bool', 'name': 'isActive', 'type': 'bool'}, {'internalType': 'bool', 'name': 'isValidator', 'type': 'bool'}, {'internalType': 'uint256', 'name': 'stake', 'type': 'uint256'}, {'internalType': 'uint64', 'name': 'registrationBlock', 'type': 'uint64'}, {'internalType': 'uint256', 'name': 'lastUpdate', 'type': 'uint256'}, {'internalType': 'string', 'name': 'axonEndpoint', 'type': 'string'}, {'internalType': 'uint32', 'name': 'axonPort', 'type': 'uint32'}, {'internalType': 'string', 'name': 'prometheusEndpoint', 'type': 'string'}, {'internalType': 'uint32', 'name': 'prometheusPort', 'type': 'uint32'}], 'internalType': 'struct SubnetTypes.DendronInfo', 'name': '', 'type': 'tuple'}]
        """
        return self.contract.functions.getDendronInfo(netuid, account).call()

    def getSubnetDendronCount(self, netuid):
        """
        Call getSubnetDendronCount(netuid)
        :param netuid: uint16 (solidity name: 'netuid')
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.getSubnetDendronCount(netuid).call()

    def getSubnetDendrons(self, netuid):
        """
        Call getSubnetDendrons(netuid)
        :param netuid: uint16 (solidity name: 'netuid')
        :return: [{'internalType': 'address[]', 'name': '', 'type': 'address[]'}]
        """
        return self.contract.functions.getSubnetDendrons(netuid).call()

    def getSubnetValidatorCount(self, netuid):
        """
        Call getSubnetValidatorCount(netuid)
        :param netuid: uint16 (solidity name: 'netuid')
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.getSubnetValidatorCount(netuid).call()

    def getSubnetValidators(self, netuid):
        """
        Call getSubnetValidators(netuid)
        :param netuid: uint16 (solidity name: 'netuid')
        :return: [{'internalType': 'address[]', 'name': '', 'type': 'address[]'}]
        """
        return self.contract.functions.getSubnetValidators(netuid).call()

    def globalStaking(self, ):
        """
        Call globalStaking()
        :return: [{'internalType': 'contract IGlobalStaking', 'name': '', 'type': 'address'}]
        """
        return self.contract.functions.globalStaking().call()

    def isDendron(self, netuid, account):
        """
        Call isDendron(netuid, account)
        :param netuid: uint16 (solidity name: 'netuid')
        :param account: address (solidity name: 'account')
        :return: [{'internalType': 'bool', 'name': '', 'type': 'bool'}]
        """
        return self.contract.functions.isDendron(netuid, account).call()

    def isValidator(self, netuid, account):
        """
        Call isValidator(netuid, account)
        :param netuid: uint16 (solidity name: 'netuid')
        :param account: address (solidity name: 'account')
        :return: [{'internalType': 'bool', 'name': '', 'type': 'bool'}]
        """
        return self.contract.functions.isValidator(netuid, account).call()

    def dendronList(self, arg0, arg1):
        """
        Call dendronList(arg0, arg1)
        :param arg0: uint16 (solidity name: 'arg0')
        :param arg1: uint256 (solidity name: 'arg1')
        :return: [{'internalType': 'address', 'name': '', 'type': 'address'}]
        """
        return self.contract.functions.dendronList(arg0, arg1).call()

    def owner(self, ):
        """
        Call owner()
        :return: [{'internalType': 'address', 'name': '', 'type': 'address'}]
        """
        return self.contract.functions.owner().call()

    def registerDendronWithStakeAllocation(self, netuid, stakeAmount, isValidatorRole, axonEndpoint, axonPort, prometheusEndpoint, prometheusPort):
        """
        Call registerDendronWithStakeAllocation(netuid, stakeAmount, isValidatorRole, axonEndpoint, axonPort, prometheusEndpoint, prometheusPort)
        :param netuid: uint16 (solidity name: 'netuid')
        :param stakeAmount: uint256 (solidity name: 'stakeAmount')
        :param isValidatorRole: bool (solidity name: 'isValidatorRole')
        :param axonEndpoint: string (solidity name: 'axonEndpoint')
        :param axonPort: uint32 (solidity name: 'axonPort')
        :param prometheusEndpoint: string (solidity name: 'prometheusEndpoint')
        :param prometheusPort: uint32 (solidity name: 'prometheusPort')
        :return: []
        """
        return self.contract.functions.registerDendronWithStakeAllocation(netuid, stakeAmount, isValidatorRole, axonEndpoint, axonPort, prometheusEndpoint, prometheusPort).call()

    def renounceOwnership(self, ):
        """
        Call renounceOwnership()
        :return: []
        """
        return self.contract.functions.renounceOwnership().call()

    def rewardDistributor(self, ):
        """
        Call rewardDistributor()
        :return: [{'internalType': 'address', 'name': '', 'type': 'address'}]
        """
        return self.contract.functions.rewardDistributor().call()

    def setRewardDistributor(self, _rewardDistributor):
        """
        Call setRewardDistributor(_rewardDistributor)
        :param _rewardDistributor: address (solidity name: '_rewardDistributor')
        :return: []
        """
        return self.contract.functions.setRewardDistributor(_rewardDistributor).call()

    def subnetManager(self, ):
        """
        Call subnetManager()
        :return: [{'internalType': 'contract ISubnetManager', 'name': '', 'type': 'address'}]
        """
        return self.contract.functions.subnetManager().call()

    def transferOwnership(self, newOwner):
        """
        Call transferOwnership(newOwner)
        :param newOwner: address (solidity name: 'newOwner')
        :return: []
        """
        return self.contract.functions.transferOwnership(newOwner).call()

    def updateDendronService(self, netuid, axonEndpoint, axonPort, prometheusEndpoint, prometheusPort):
        """
        Call updateDendronService(netuid, axonEndpoint, axonPort, prometheusEndpoint, prometheusPort)
        :param netuid: uint16 (solidity name: 'netuid')
        :param axonEndpoint: string (solidity name: 'axonEndpoint')
        :param axonPort: uint32 (solidity name: 'axonPort')
        :param prometheusEndpoint: string (solidity name: 'prometheusEndpoint')
        :param prometheusPort: uint32 (solidity name: 'prometheusPort')
        :return: []
        """
        return self.contract.functions.updateDendronService(netuid, axonEndpoint, axonPort, prometheusEndpoint, prometheusPort).call()

    def updateStakeAllocation(self, netuid, account, newStake):
        """
        Call updateStakeAllocation(netuid, account, newStake)
        :param netuid: uint16 (solidity name: 'netuid')
        :param account: address (solidity name: 'account')
        :param newStake: uint256 (solidity name: 'newStake')
        :return: []
        """
        return self.contract.functions.updateStakeAllocation(netuid, account, newStake).call()

    def deregisterDendron(self, netuid):
        """
        Call deregisterDendron(netuid)
        :param netuid: uint16 (solidity name: 'netuid')
        :return: []
        """
        return self.contract.functions.deregisterDendron(netuid).call()

    def dendrons(self, netuid, account):
        """
        Call dendrons(netuid, account)
        :param netuid: uint16 (solidity name: 'netuid')
        :param account: address (solidity name: 'account')
        :return: [{'internalType': 'struct SubnetTypes.DendronInfo', 'name': '', 'type': 'tuple'}]
        """
        return self.contract.functions.dendrons(netuid, account).call()